// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SportsApp.Data;

namespace SportsApp.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20210818145744_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("ProductVersion", "5.0.8")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("SportsApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("IsBanned")
                        .HasColumnType("bit");

                    b.Property<int>("Location")
                        .HasColumnType("int");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("Varchar(30)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("ProfileImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RegistrationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Role")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("Varchar(30)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("TeamId");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("SportsApp.Models.Ban", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("IsBanned")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SportFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SportsFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("SportFieldId");

                    b.ToTable("Ban");
                });

            modelBuilder.Entity("SportsApp.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("MaxCapacity")
                        .HasColumnType("int");

                    b.Property<int>("MinCapacity")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("aebccc86-8fe0-4982-be8a-472559e9325c"),
                            MaxCapacity = 11,
                            MinCapacity = 4,
                            Name = "Football"
                        },
                        new
                        {
                            Id = new Guid("65512a1e-d11c-4c4e-abcd-e9eb7c2b1b2f"),
                            MaxCapacity = 5,
                            MinCapacity = 2,
                            Name = "Basketball"
                        },
                        new
                        {
                            Id = new Guid("44512bed-abdc-48ef-a9e6-a05fca0d64a6"),
                            MaxCapacity = 6,
                            MinCapacity = 2,
                            Name = "Volleyball"
                        },
                        new
                        {
                            Id = new Guid("1167bec2-b820-4a4e-b408-162f8a0529a3"),
                            MaxCapacity = 2,
                            MinCapacity = 1,
                            Name = "Tennis"
                        });
                });

            modelBuilder.Entity("SportsApp.Models.ContactUs", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContactUs");
                });

            modelBuilder.Entity("SportsApp.Models.FieldOwner", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BuissnessName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.ToTable("FieldOwners");
                });

            modelBuilder.Entity("SportsApp.Models.GameRoom", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ChatImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("MatchesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("SportFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("MatchesId");

                    b.HasIndex("SportFieldId");

                    b.ToTable("GameRooms");
                });

            modelBuilder.Entity("SportsApp.Models.GameRoomChat", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("AdminId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ChatImg")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ChatName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("GameRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("AdminId");

                    b.HasIndex("GameRoomId");

                    b.ToTable("GameRoomChats");
                });

            modelBuilder.Entity("SportsApp.Models.Matches", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SportFieldId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Team1Id")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Team2Id")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Matches");
                });

            modelBuilder.Entity("SportsApp.Models.Message", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<string>("FromUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("ToRoomChatId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("FromUserId");

                    b.HasIndex("ToRoomChatId");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("SportsApp.Models.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsRead")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("SportsApp.Models.Schedule", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MatchesId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("Reserved")
                        .HasColumnType("bit");

                    b.Property<Guid>("SportFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("MatchesId")
                        .IsUnique()
                        .HasFilter("[MatchesId] IS NOT NULL");

                    b.HasIndex("SportFieldId");

                    b.ToTable("Schedules");
                });

            modelBuilder.Entity("SportsApp.Models.SportField", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ApplicationUserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ContactNr")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsApproved")
                        .HasColumnType("bit");

                    b.Property<string>("MainPicture")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("SportFieldGeoLocationLat")
                        .HasColumnType("float");

                    b.Property<double>("SportFieldGeoLocationLong")
                        .HasColumnType("float");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("ViewsCount")
                        .HasColumnType("int");

                    b.Property<string>("WorkDaysE")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationUserId");

                    b.HasIndex("CategoryId");

                    b.ToTable("SportFields");
                });

            modelBuilder.Entity("SportsApp.Models.SportFieldPictures", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("SportFieldId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SportFieldId");

                    b.ToTable("SportFieldPictures");
                });

            modelBuilder.Entity("SportsApp.Models.Team", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("City")
                        .HasColumnType("int");

                    b.Property<Guid?>("GameRoomId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("MatchId")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(12)
                        .HasColumnType("nvarchar(12)");

                    b.Property<Guid>("TeamLeaderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("isPrivate")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GameRoomId");

                    b.ToTable("Teams");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5106562c-9ca7-4a99-8883-9871dabf6447"),
                            CategoryId = new Guid("aebccc86-8fe0-4982-be8a-472559e9325c"),
                            City = 1,
                            Name = "ErwinHype",
                            TeamLeaderId = new Guid("fd24f2ad-666a-4f68-8b2e-693480f24366"),
                            isPrivate = true
                        },
                        new
                        {
                            Id = new Guid("aa96686c-7a3a-4d6f-8ae1-be0f63cc3d53"),
                            CategoryId = new Guid("aebccc86-8fe0-4982-be8a-472559e9325c"),
                            City = 1,
                            Name = "Thor",
                            TeamLeaderId = new Guid("1be3a521-e461-446a-861a-c96fc68d49ec"),
                            isPrivate = false
                        },
                        new
                        {
                            Id = new Guid("fa50f93d-2d5c-4993-9cd1-4e2bdbf7838e"),
                            CategoryId = new Guid("aebccc86-8fe0-4982-be8a-472559e9325c"),
                            City = 0,
                            Name = "Hela",
                            TeamLeaderId = new Guid("fd801da1-3797-43f9-8e05-174bbcfbd459"),
                            isPrivate = false
                        },
                        new
                        {
                            Id = new Guid("d4629334-8b6a-40cd-a05d-ff38d5815891"),
                            CategoryId = new Guid("65512a1e-d11c-4c4e-abcd-e9eb7c2b1b2f"),
                            City = 1,
                            Name = "Odin",
                            TeamLeaderId = new Guid("2b67092b-7eaa-4567-861f-1ab79e414221"),
                            isPrivate = true
                        },
                        new
                        {
                            Id = new Guid("0b6e451e-de09-42fe-9e98-9e3d81ffe133"),
                            CategoryId = new Guid("65512a1e-d11c-4c4e-abcd-e9eb7c2b1b2f"),
                            City = 1,
                            Name = "Frigga",
                            TeamLeaderId = new Guid("2190f801-782c-400e-bbd9-8a9800eae2a1"),
                            isPrivate = false
                        },
                        new
                        {
                            Id = new Guid("9d98c89c-bbb4-428b-86ad-d607b72605c5"),
                            CategoryId = new Guid("1167bec2-b820-4a4e-b408-162f8a0529a3"),
                            City = 1,
                            Name = "Sylvie",
                            TeamLeaderId = new Guid("53646e81-a606-48a7-b324-e7a7440c708a"),
                            isPrivate = false
                        });
                });

            modelBuilder.Entity("SportsApp.Models.TeamRequests", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("PlayerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<Guid?>("TeamId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TeamId");

                    b.ToTable("TeamsRequests");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("SportsApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("SportsApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("SportsApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SportsApp.Data.ApplicationUser", b =>
                {
                    b.HasOne("SportsApp.Models.Team", "Team")
                        .WithMany("Players")
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportsApp.Models.Ban", b =>
                {
                    b.HasOne("SportsApp.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SportsApp.Models.SportField", "SportField")
                        .WithMany()
                        .HasForeignKey("SportFieldId");

                    b.Navigation("ApplicationUser");

                    b.Navigation("SportField");
                });

            modelBuilder.Entity("SportsApp.Models.FieldOwner", b =>
                {
                    b.HasOne("SportsApp.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.Navigation("ApplicationUser");
                });

            modelBuilder.Entity("SportsApp.Models.GameRoom", b =>
                {
                    b.HasOne("SportsApp.Models.Matches", "Matches")
                        .WithMany()
                        .HasForeignKey("MatchesId");

                    b.HasOne("SportsApp.Models.SportField", "SportField")
                        .WithMany()
                        .HasForeignKey("SportFieldId");

                    b.Navigation("Matches");

                    b.Navigation("SportField");
                });

            modelBuilder.Entity("SportsApp.Models.GameRoomChat", b =>
                {
                    b.HasOne("SportsApp.Data.ApplicationUser", "Admin")
                        .WithMany("Room")
                        .HasForeignKey("AdminId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsApp.Models.GameRoom", "GameRoom")
                        .WithMany("GameRoomChat")
                        .HasForeignKey("GameRoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Admin");

                    b.Navigation("GameRoom");
                });

            modelBuilder.Entity("SportsApp.Models.Message", b =>
                {
                    b.HasOne("SportsApp.Data.ApplicationUser", "FromUser")
                        .WithMany("Messages")
                        .HasForeignKey("FromUserId");

                    b.HasOne("SportsApp.Models.GameRoomChat", "ToRoomChat")
                        .WithMany("Messages")
                        .HasForeignKey("ToRoomChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FromUser");

                    b.Navigation("ToRoomChat");
                });

            modelBuilder.Entity("SportsApp.Models.Notification", b =>
                {
                    b.HasOne("SportsApp.Data.ApplicationUser", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SportsApp.Models.Schedule", b =>
                {
                    b.HasOne("SportsApp.Models.Matches", "Matches")
                        .WithOne("Schedule")
                        .HasForeignKey("SportsApp.Models.Schedule", "MatchesId");

                    b.HasOne("SportsApp.Models.SportField", "SportField")
                        .WithMany("Schedules")
                        .HasForeignKey("SportFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Matches");

                    b.Navigation("SportField");
                });

            modelBuilder.Entity("SportsApp.Models.SportField", b =>
                {
                    b.HasOne("SportsApp.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("ApplicationUserId");

                    b.HasOne("SportsApp.Models.Category", "Category")
                        .WithMany("SportFields")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ApplicationUser");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("SportsApp.Models.SportFieldPictures", b =>
                {
                    b.HasOne("SportsApp.Models.SportField", "SportField")
                        .WithMany("Pictures")
                        .HasForeignKey("SportFieldId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("SportField");
                });

            modelBuilder.Entity("SportsApp.Models.Team", b =>
                {
                    b.HasOne("SportsApp.Models.Category", "Category")
                        .WithMany("Teams")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SportsApp.Models.GameRoom", "GameRoom")
                        .WithMany("Teams")
                        .HasForeignKey("GameRoomId");

                    b.Navigation("Category");

                    b.Navigation("GameRoom");
                });

            modelBuilder.Entity("SportsApp.Models.TeamRequests", b =>
                {
                    b.HasOne("SportsApp.Data.ApplicationUser", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId");

                    b.HasOne("SportsApp.Models.Team", "Team")
                        .WithMany("PlayersInRequest")
                        .HasForeignKey("TeamId");

                    b.Navigation("Player");

                    b.Navigation("Team");
                });

            modelBuilder.Entity("SportsApp.Data.ApplicationUser", b =>
                {
                    b.Navigation("Messages");

                    b.Navigation("Notifications");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("SportsApp.Models.Category", b =>
                {
                    b.Navigation("SportFields");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("SportsApp.Models.GameRoom", b =>
                {
                    b.Navigation("GameRoomChat");

                    b.Navigation("Teams");
                });

            modelBuilder.Entity("SportsApp.Models.GameRoomChat", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("SportsApp.Models.Matches", b =>
                {
                    b.Navigation("Schedule");
                });

            modelBuilder.Entity("SportsApp.Models.SportField", b =>
                {
                    b.Navigation("Pictures");

                    b.Navigation("Schedules");
                });

            modelBuilder.Entity("SportsApp.Models.Team", b =>
                {
                    b.Navigation("Players");

                    b.Navigation("PlayersInRequest");
                });
#pragma warning restore 612, 618
        }
    }
}
